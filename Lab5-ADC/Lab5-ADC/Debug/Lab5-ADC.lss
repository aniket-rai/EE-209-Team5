
Lab5-ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000634  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cca  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a95  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e6  00000000  00000000  00001ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000023c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ff  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000286  00000000  00000000  0000299f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002c25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  c4:	0c 94 18 03 	jmp	0x630	; 0x630 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <init_adc>:

#include <avr/io.h>

void init_adc() {
	// Reference Selection - AVCC
	ADMUX |= (1 << REFS0);
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  d6:	80 81       	ld	r24, Z
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	80 83       	st	Z, r24
		
	// Left Adjust Results
	ADMUX |= (1 << ADLAR);
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
		
	// Enable Conversion
	ADCSRA |= (1 << ADEN);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 83       	st	Z, r24
	
	// Set prescaler
	ADCSRA |= (1 << ADPS0);
  ec:	80 81       	ld	r24, Z
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);
  f8:	80 81       	ld	r24, Z
  fa:	84 60       	ori	r24, 0x04	; 4
  fc:	80 83       	st	Z, r24
		
	// Ensure Control + Status Register B is in Free Running Mode
	ADCSRB = 0b00000000;
  fe:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 102:	08 95       	ret

00000104 <read_adc>:
}

uint16_t read_adc(uint8_t channel) {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <read_adc+0x6>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	// Set the channel to argument passed in
	ADMUX = 0b01100000;
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 e6       	ldi	r25, 0x60	; 96
 114:	90 83       	st	Z, r25
	ADMUX |= channel;
 116:	90 81       	ld	r25, Z
 118:	89 2b       	or	r24, r25
 11a:	80 83       	st	Z, r24
	
	// Start converting and wait for finish
	ADCSRA |= (1 << ADSC);
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
	while ((ADCSRA & (1 << ADIF)) == 0) {
 126:	80 81       	ld	r24, Z
 128:	84 ff       	sbrs	r24, 4
 12a:	fd cf       	rjmp	.-6      	; 0x126 <read_adc+0x22>
		// Blocking
	}
	
	// Store adc value and returnit
	volatile uint16_t adc_value = ADCH;
 12c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9a 83       	std	Y+2, r25	; 0x02
 134:	89 83       	std	Y+1, r24	; 0x01
	return adc_value;
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	9a 81       	ldd	r25, Y+2	; 0x02
}
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <convert_adc>:
	
double convert_adc(uint16_t adc_value) {
	return ((double)adc_value * ((double)5/(double)256));
 144:	bc 01       	movw	r22, r24
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__floatunsisf>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 ea       	ldi	r20, 0xA0	; 160
 154:	5c e3       	ldi	r21, 0x3C	; 60
 156:	0e 94 83 02 	call	0x506	; 0x506 <__mulsf3>
}
 15a:	08 95       	ret

0000015c <transmit_data>:

#define DOT 46
#define NEWLINE 10
#define STARTLINE 13

void transmit_data(float data) {
 15c:	cf 92       	push	r12
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	6b 01       	movw	r12, r22
 166:	7c 01       	movw	r14, r24
	// transmit 1.00 column
	transmit_uart((uint8_t)data + 48);
 168:	0e 94 c6 01 	call	0x38c	; 0x38c <__fixunssfsi>
 16c:	86 2f       	mov	r24, r22
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	c0 96       	adiw	r24, 0x30	; 48
 172:	0e 94 4a 01 	call	0x294	; 0x294 <transmit_uart>
	
	// transmit 0.10 column
	transmit_uart(DOT);
 176:	8e e2       	ldi	r24, 0x2E	; 46
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 4a 01 	call	0x294	; 0x294 <transmit_uart>
	uint8_t tens = 10*(data - (int)data);
	transmit_uart(tens + 48);
 17e:	c7 01       	movw	r24, r14
 180:	b6 01       	movw	r22, r12
 182:	0e 94 bf 01 	call	0x37e	; 0x37e <__fixsfsi>
 186:	07 2e       	mov	r0, r23
 188:	00 0c       	add	r0, r0
 18a:	88 0b       	sbc	r24, r24
 18c:	99 0b       	sbc	r25, r25
 18e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__floatsisf>
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	c7 01       	movw	r24, r14
 198:	b6 01       	movw	r22, r12
 19a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__subsf3>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e2       	ldi	r20, 0x20	; 32
 1a4:	51 e4       	ldi	r21, 0x41	; 65
 1a6:	0e 94 83 02 	call	0x506	; 0x506 <__mulsf3>
 1aa:	0e 94 c6 01 	call	0x38c	; 0x38c <__fixunssfsi>
 1ae:	86 2f       	mov	r24, r22
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	c0 96       	adiw	r24, 0x30	; 48
 1b4:	0e 94 4a 01 	call	0x294	; 0x294 <transmit_uart>
	
	// transmit 0.01 column
	data *= 100;
	int ones = (int)data % 10;
	transmit_uart(ones + 48);
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	48 ec       	ldi	r20, 0xC8	; 200
 1be:	52 e4       	ldi	r21, 0x42	; 66
 1c0:	c7 01       	movw	r24, r14
 1c2:	b6 01       	movw	r22, r12
 1c4:	0e 94 83 02 	call	0x506	; 0x506 <__mulsf3>
 1c8:	0e 94 bf 01 	call	0x37e	; 0x37e <__fixsfsi>
 1cc:	cb 01       	movw	r24, r22
 1ce:	6a e0       	ldi	r22, 0x0A	; 10
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__divmodhi4>
 1d6:	c0 96       	adiw	r24, 0x30	; 48
 1d8:	0e 94 4a 01 	call	0x294	; 0x294 <transmit_uart>
	transmit_uart(NEWLINE);
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 4a 01 	call	0x294	; 0x294 <transmit_uart>
	transmit_uart(STARTLINE);
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 4a 01 	call	0x294	; 0x294 <transmit_uart>
}
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	08 95       	ret

000001f6 <main>:

int main(void)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <main+0x6>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <main+0x8>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
	// Initialisation
	init_adc();
 202:	0e 94 66 00 	call	0xcc	; 0xcc <init_adc>
	init_uart(103);
 206:	87 e6       	ldi	r24, 0x67	; 103
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 25 01 	call	0x24a	; 0x24a <init_uart>
	uint8_t channel = 0;
 20e:	10 e0       	ldi	r17, 0x00	; 0
		transmit_uart(65+channel);
		volatile double data = convert_adc(read_adc(channel));
		transmit_data((float)data);
			
		// change the channel
		if (channel == 0) {
 210:	01 e0       	ldi	r16, 0x01	; 1
 212:	d1 2c       	mov	r13, r1
    {
		//float data = 3.14659265358975323846;
		//transmit_data(data);
		
		// read, convert and transmit data
		transmit_uart(65+channel);
 214:	e1 2e       	mov	r14, r17
 216:	f1 2c       	mov	r15, r1
 218:	c7 01       	movw	r24, r14
 21a:	8f 5b       	subi	r24, 0xBF	; 191
 21c:	9f 4f       	sbci	r25, 0xFF	; 255
 21e:	0e 94 4a 01 	call	0x294	; 0x294 <transmit_uart>
		volatile double data = convert_adc(read_adc(channel));
 222:	c7 01       	movw	r24, r14
 224:	0e 94 82 00 	call	0x104	; 0x104 <read_adc>
 228:	0e 94 a2 00 	call	0x144	; 0x144 <convert_adc>
 22c:	69 83       	std	Y+1, r22	; 0x01
 22e:	7a 83       	std	Y+2, r23	; 0x02
 230:	8b 83       	std	Y+3, r24	; 0x03
 232:	9c 83       	std	Y+4, r25	; 0x04
		transmit_data((float)data);
 234:	69 81       	ldd	r22, Y+1	; 0x01
 236:	7a 81       	ldd	r23, Y+2	; 0x02
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	9c 81       	ldd	r25, Y+4	; 0x04
 23c:	0e 94 ae 00 	call	0x15c	; 0x15c <transmit_data>
			
		// change the channel
		if (channel == 0) {
 240:	80 2f       	mov	r24, r16
 242:	11 11       	cpse	r17, r1
 244:	8d 2d       	mov	r24, r13
			channel = 1;
		}
		else {
			channel = 0;
 246:	18 2f       	mov	r17, r24
 248:	e5 cf       	rjmp	.-54     	; 0x214 <main+0x1e>

0000024a <init_uart>:
 *  Author: Aniket
 */ 

#include <avr/io.h>

void init_uart(uint16_t ubrr) {
 24a:	9c 01       	movw	r18, r24
	// Mode Selection - Asynchronous USART
	UCSR0C &= ~(1 << UMSEL10);
 24c:	e2 ec       	ldi	r30, 0xC2	; 194
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	90 81       	ld	r25, Z
 252:	9f 7b       	andi	r25, 0xBF	; 191
 254:	90 83       	st	Z, r25
	UCSR0C &= ~(1 << UMSEL11);
 256:	90 81       	ld	r25, Z
 258:	9f 77       	andi	r25, 0x7F	; 127
 25a:	90 83       	st	Z, r25

	// Character Size - 8 Bit
	UCSR0B &= ~(1 << UCSZ02);
 25c:	a1 ec       	ldi	r26, 0xC1	; 193
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	9c 91       	ld	r25, X
 262:	9b 7f       	andi	r25, 0xFB	; 251
 264:	9c 93       	st	X, r25
	UCSR0C |= (1 << UCSZ10);
 266:	90 81       	ld	r25, Z
 268:	92 60       	ori	r25, 0x02	; 2
 26a:	90 83       	st	Z, r25
	UCSR0C |= (1 << UCSZ11);
 26c:	90 81       	ld	r25, Z
 26e:	94 60       	ori	r25, 0x04	; 4
 270:	90 83       	st	Z, r25

	// Baud Rate - 9600
	UBRR0 = ubrr;
 272:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 276:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// Transmitter Enable - Yes
	UCSR0B |= (1 << TXEN0);
 27a:	8c 91       	ld	r24, X
 27c:	88 60       	ori	r24, 0x08	; 8
 27e:	8c 93       	st	X, r24

	// Parity Mode - Disabled
	UCSR0C &= ~(1 << UPM00);
 280:	80 81       	ld	r24, Z
 282:	8f 7e       	andi	r24, 0xEF	; 239
 284:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM10);
 286:	80 81       	ld	r24, Z
 288:	8f 7e       	andi	r24, 0xEF	; 239
 28a:	80 83       	st	Z, r24

	// Stop Bit Selection - 1 bit
	UCSR0C &= ~(1 << USBS0);
 28c:	80 81       	ld	r24, Z
 28e:	87 7f       	andi	r24, 0xF7	; 247
 290:	80 83       	st	Z, r24
 292:	08 95       	ret

00000294 <transmit_uart>:
}

void transmit_uart(uint8_t data) {
	while(!(UCSR0A & (1 << UDRE0))) {
 294:	e0 ec       	ldi	r30, 0xC0	; 192
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	90 81       	ld	r25, Z
 29a:	95 ff       	sbrs	r25, 5
 29c:	fd cf       	rjmp	.-6      	; 0x298 <transmit_uart+0x4>
		
	}
	UDR0 = data;
 29e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2a2:	08 95       	ret

000002a4 <__subsf3>:
 2a4:	50 58       	subi	r21, 0x80	; 128

000002a6 <__addsf3>:
 2a6:	bb 27       	eor	r27, r27
 2a8:	aa 27       	eor	r26, r26
 2aa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__addsf3x>
 2ae:	0c 94 49 02 	jmp	0x492	; 0x492 <__fp_round>
 2b2:	0e 94 3b 02 	call	0x476	; 0x476 <__fp_pscA>
 2b6:	38 f0       	brcs	.+14     	; 0x2c6 <__addsf3+0x20>
 2b8:	0e 94 42 02 	call	0x484	; 0x484 <__fp_pscB>
 2bc:	20 f0       	brcs	.+8      	; 0x2c6 <__addsf3+0x20>
 2be:	39 f4       	brne	.+14     	; 0x2ce <__addsf3+0x28>
 2c0:	9f 3f       	cpi	r25, 0xFF	; 255
 2c2:	19 f4       	brne	.+6      	; 0x2ca <__addsf3+0x24>
 2c4:	26 f4       	brtc	.+8      	; 0x2ce <__addsf3+0x28>
 2c6:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_nan>
 2ca:	0e f4       	brtc	.+2      	; 0x2ce <__addsf3+0x28>
 2cc:	e0 95       	com	r30
 2ce:	e7 fb       	bst	r30, 7
 2d0:	0c 94 32 02 	jmp	0x464	; 0x464 <__fp_inf>

000002d4 <__addsf3x>:
 2d4:	e9 2f       	mov	r30, r25
 2d6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__fp_split3>
 2da:	58 f3       	brcs	.-42     	; 0x2b2 <__addsf3+0xc>
 2dc:	ba 17       	cp	r27, r26
 2de:	62 07       	cpc	r22, r18
 2e0:	73 07       	cpc	r23, r19
 2e2:	84 07       	cpc	r24, r20
 2e4:	95 07       	cpc	r25, r21
 2e6:	20 f0       	brcs	.+8      	; 0x2f0 <__addsf3x+0x1c>
 2e8:	79 f4       	brne	.+30     	; 0x308 <__addsf3x+0x34>
 2ea:	a6 f5       	brtc	.+104    	; 0x354 <__addsf3x+0x80>
 2ec:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__fp_zero>
 2f0:	0e f4       	brtc	.+2      	; 0x2f4 <__addsf3x+0x20>
 2f2:	e0 95       	com	r30
 2f4:	0b 2e       	mov	r0, r27
 2f6:	ba 2f       	mov	r27, r26
 2f8:	a0 2d       	mov	r26, r0
 2fa:	0b 01       	movw	r0, r22
 2fc:	b9 01       	movw	r22, r18
 2fe:	90 01       	movw	r18, r0
 300:	0c 01       	movw	r0, r24
 302:	ca 01       	movw	r24, r20
 304:	a0 01       	movw	r20, r0
 306:	11 24       	eor	r1, r1
 308:	ff 27       	eor	r31, r31
 30a:	59 1b       	sub	r21, r25
 30c:	99 f0       	breq	.+38     	; 0x334 <__addsf3x+0x60>
 30e:	59 3f       	cpi	r21, 0xF9	; 249
 310:	50 f4       	brcc	.+20     	; 0x326 <__addsf3x+0x52>
 312:	50 3e       	cpi	r21, 0xE0	; 224
 314:	68 f1       	brcs	.+90     	; 0x370 <__addsf3x+0x9c>
 316:	1a 16       	cp	r1, r26
 318:	f0 40       	sbci	r31, 0x00	; 0
 31a:	a2 2f       	mov	r26, r18
 31c:	23 2f       	mov	r18, r19
 31e:	34 2f       	mov	r19, r20
 320:	44 27       	eor	r20, r20
 322:	58 5f       	subi	r21, 0xF8	; 248
 324:	f3 cf       	rjmp	.-26     	; 0x30c <__addsf3x+0x38>
 326:	46 95       	lsr	r20
 328:	37 95       	ror	r19
 32a:	27 95       	ror	r18
 32c:	a7 95       	ror	r26
 32e:	f0 40       	sbci	r31, 0x00	; 0
 330:	53 95       	inc	r21
 332:	c9 f7       	brne	.-14     	; 0x326 <__addsf3x+0x52>
 334:	7e f4       	brtc	.+30     	; 0x354 <__addsf3x+0x80>
 336:	1f 16       	cp	r1, r31
 338:	ba 0b       	sbc	r27, r26
 33a:	62 0b       	sbc	r22, r18
 33c:	73 0b       	sbc	r23, r19
 33e:	84 0b       	sbc	r24, r20
 340:	ba f0       	brmi	.+46     	; 0x370 <__addsf3x+0x9c>
 342:	91 50       	subi	r25, 0x01	; 1
 344:	a1 f0       	breq	.+40     	; 0x36e <__addsf3x+0x9a>
 346:	ff 0f       	add	r31, r31
 348:	bb 1f       	adc	r27, r27
 34a:	66 1f       	adc	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	88 1f       	adc	r24, r24
 350:	c2 f7       	brpl	.-16     	; 0x342 <__addsf3x+0x6e>
 352:	0e c0       	rjmp	.+28     	; 0x370 <__addsf3x+0x9c>
 354:	ba 0f       	add	r27, r26
 356:	62 1f       	adc	r22, r18
 358:	73 1f       	adc	r23, r19
 35a:	84 1f       	adc	r24, r20
 35c:	48 f4       	brcc	.+18     	; 0x370 <__addsf3x+0x9c>
 35e:	87 95       	ror	r24
 360:	77 95       	ror	r23
 362:	67 95       	ror	r22
 364:	b7 95       	ror	r27
 366:	f7 95       	ror	r31
 368:	9e 3f       	cpi	r25, 0xFE	; 254
 36a:	08 f0       	brcs	.+2      	; 0x36e <__addsf3x+0x9a>
 36c:	b0 cf       	rjmp	.-160    	; 0x2ce <__addsf3+0x28>
 36e:	93 95       	inc	r25
 370:	88 0f       	add	r24, r24
 372:	08 f0       	brcs	.+2      	; 0x376 <__addsf3x+0xa2>
 374:	99 27       	eor	r25, r25
 376:	ee 0f       	add	r30, r30
 378:	97 95       	ror	r25
 37a:	87 95       	ror	r24
 37c:	08 95       	ret

0000037e <__fixsfsi>:
 37e:	0e 94 c6 01 	call	0x38c	; 0x38c <__fixunssfsi>
 382:	68 94       	set
 384:	b1 11       	cpse	r27, r1
 386:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_szero>
 38a:	08 95       	ret

0000038c <__fixunssfsi>:
 38c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_splitA>
 390:	88 f0       	brcs	.+34     	; 0x3b4 <__fixunssfsi+0x28>
 392:	9f 57       	subi	r25, 0x7F	; 127
 394:	98 f0       	brcs	.+38     	; 0x3bc <__fixunssfsi+0x30>
 396:	b9 2f       	mov	r27, r25
 398:	99 27       	eor	r25, r25
 39a:	b7 51       	subi	r27, 0x17	; 23
 39c:	b0 f0       	brcs	.+44     	; 0x3ca <__fixunssfsi+0x3e>
 39e:	e1 f0       	breq	.+56     	; 0x3d8 <__fixunssfsi+0x4c>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	88 1f       	adc	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	1a f0       	brmi	.+6      	; 0x3b0 <__fixunssfsi+0x24>
 3aa:	ba 95       	dec	r27
 3ac:	c9 f7       	brne	.-14     	; 0x3a0 <__fixunssfsi+0x14>
 3ae:	14 c0       	rjmp	.+40     	; 0x3d8 <__fixunssfsi+0x4c>
 3b0:	b1 30       	cpi	r27, 0x01	; 1
 3b2:	91 f0       	breq	.+36     	; 0x3d8 <__fixunssfsi+0x4c>
 3b4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_zero>
 3b8:	b1 e0       	ldi	r27, 0x01	; 1
 3ba:	08 95       	ret
 3bc:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__fp_zero>
 3c0:	67 2f       	mov	r22, r23
 3c2:	78 2f       	mov	r23, r24
 3c4:	88 27       	eor	r24, r24
 3c6:	b8 5f       	subi	r27, 0xF8	; 248
 3c8:	39 f0       	breq	.+14     	; 0x3d8 <__fixunssfsi+0x4c>
 3ca:	b9 3f       	cpi	r27, 0xF9	; 249
 3cc:	cc f3       	brlt	.-14     	; 0x3c0 <__fixunssfsi+0x34>
 3ce:	86 95       	lsr	r24
 3d0:	77 95       	ror	r23
 3d2:	67 95       	ror	r22
 3d4:	b3 95       	inc	r27
 3d6:	d9 f7       	brne	.-10     	; 0x3ce <__fixunssfsi+0x42>
 3d8:	3e f4       	brtc	.+14     	; 0x3e8 <__fixunssfsi+0x5c>
 3da:	90 95       	com	r25
 3dc:	80 95       	com	r24
 3de:	70 95       	com	r23
 3e0:	61 95       	neg	r22
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	8f 4f       	sbci	r24, 0xFF	; 255
 3e6:	9f 4f       	sbci	r25, 0xFF	; 255
 3e8:	08 95       	ret

000003ea <__floatunsisf>:
 3ea:	e8 94       	clt
 3ec:	09 c0       	rjmp	.+18     	; 0x400 <__LOCK_REGION_LENGTH__>

000003ee <__floatsisf>:
 3ee:	97 fb       	bst	r25, 7
 3f0:	3e f4       	brtc	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f2:	90 95       	com	r25
 3f4:	80 95       	com	r24
 3f6:	70 95       	com	r23
 3f8:	61 95       	neg	r22
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	8f 4f       	sbci	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	99 23       	and	r25, r25
 402:	a9 f0       	breq	.+42     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 404:	f9 2f       	mov	r31, r25
 406:	96 e9       	ldi	r25, 0x96	; 150
 408:	bb 27       	eor	r27, r27
 40a:	93 95       	inc	r25
 40c:	f6 95       	lsr	r31
 40e:	87 95       	ror	r24
 410:	77 95       	ror	r23
 412:	67 95       	ror	r22
 414:	b7 95       	ror	r27
 416:	f1 11       	cpse	r31, r1
 418:	f8 cf       	rjmp	.-16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 41a:	fa f4       	brpl	.+62     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 41c:	bb 0f       	add	r27, r27
 41e:	11 f4       	brne	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	60 ff       	sbrs	r22, 0
 422:	1b c0       	rjmp	.+54     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 424:	6f 5f       	subi	r22, 0xFF	; 255
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	8f 4f       	sbci	r24, 0xFF	; 255
 42a:	9f 4f       	sbci	r25, 0xFF	; 255
 42c:	16 c0       	rjmp	.+44     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 42e:	88 23       	and	r24, r24
 430:	11 f0       	breq	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	96 e9       	ldi	r25, 0x96	; 150
 434:	11 c0       	rjmp	.+34     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 436:	77 23       	and	r23, r23
 438:	21 f0       	breq	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43a:	9e e8       	ldi	r25, 0x8E	; 142
 43c:	87 2f       	mov	r24, r23
 43e:	76 2f       	mov	r23, r22
 440:	05 c0       	rjmp	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 442:	66 23       	and	r22, r22
 444:	71 f0       	breq	.+28     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 446:	96 e8       	ldi	r25, 0x86	; 134
 448:	86 2f       	mov	r24, r22
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	2a f0       	brmi	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 450:	9a 95       	dec	r25
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	da f7       	brpl	.-10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 45a:	88 0f       	add	r24, r24
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <__fp_inf>:
 464:	97 f9       	bld	r25, 7
 466:	9f 67       	ori	r25, 0x7F	; 127
 468:	80 e8       	ldi	r24, 0x80	; 128
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	08 95       	ret

00000470 <__fp_nan>:
 470:	9f ef       	ldi	r25, 0xFF	; 255
 472:	80 ec       	ldi	r24, 0xC0	; 192
 474:	08 95       	ret

00000476 <__fp_pscA>:
 476:	00 24       	eor	r0, r0
 478:	0a 94       	dec	r0
 47a:	16 16       	cp	r1, r22
 47c:	17 06       	cpc	r1, r23
 47e:	18 06       	cpc	r1, r24
 480:	09 06       	cpc	r0, r25
 482:	08 95       	ret

00000484 <__fp_pscB>:
 484:	00 24       	eor	r0, r0
 486:	0a 94       	dec	r0
 488:	12 16       	cp	r1, r18
 48a:	13 06       	cpc	r1, r19
 48c:	14 06       	cpc	r1, r20
 48e:	05 06       	cpc	r0, r21
 490:	08 95       	ret

00000492 <__fp_round>:
 492:	09 2e       	mov	r0, r25
 494:	03 94       	inc	r0
 496:	00 0c       	add	r0, r0
 498:	11 f4       	brne	.+4      	; 0x49e <__fp_round+0xc>
 49a:	88 23       	and	r24, r24
 49c:	52 f0       	brmi	.+20     	; 0x4b2 <__fp_round+0x20>
 49e:	bb 0f       	add	r27, r27
 4a0:	40 f4       	brcc	.+16     	; 0x4b2 <__fp_round+0x20>
 4a2:	bf 2b       	or	r27, r31
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__fp_round+0x18>
 4a6:	60 ff       	sbrs	r22, 0
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__fp_round+0x20>
 4aa:	6f 5f       	subi	r22, 0xFF	; 255
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	8f 4f       	sbci	r24, 0xFF	; 255
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	08 95       	ret

000004b4 <__fp_split3>:
 4b4:	57 fd       	sbrc	r21, 7
 4b6:	90 58       	subi	r25, 0x80	; 128
 4b8:	44 0f       	add	r20, r20
 4ba:	55 1f       	adc	r21, r21
 4bc:	59 f0       	breq	.+22     	; 0x4d4 <__fp_splitA+0x10>
 4be:	5f 3f       	cpi	r21, 0xFF	; 255
 4c0:	71 f0       	breq	.+28     	; 0x4de <__fp_splitA+0x1a>
 4c2:	47 95       	ror	r20

000004c4 <__fp_splitA>:
 4c4:	88 0f       	add	r24, r24
 4c6:	97 fb       	bst	r25, 7
 4c8:	99 1f       	adc	r25, r25
 4ca:	61 f0       	breq	.+24     	; 0x4e4 <__fp_splitA+0x20>
 4cc:	9f 3f       	cpi	r25, 0xFF	; 255
 4ce:	79 f0       	breq	.+30     	; 0x4ee <__fp_splitA+0x2a>
 4d0:	87 95       	ror	r24
 4d2:	08 95       	ret
 4d4:	12 16       	cp	r1, r18
 4d6:	13 06       	cpc	r1, r19
 4d8:	14 06       	cpc	r1, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	f2 cf       	rjmp	.-28     	; 0x4c2 <__fp_split3+0xe>
 4de:	46 95       	lsr	r20
 4e0:	f1 df       	rcall	.-30     	; 0x4c4 <__fp_splitA>
 4e2:	08 c0       	rjmp	.+16     	; 0x4f4 <__fp_splitA+0x30>
 4e4:	16 16       	cp	r1, r22
 4e6:	17 06       	cpc	r1, r23
 4e8:	18 06       	cpc	r1, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	f1 cf       	rjmp	.-30     	; 0x4d0 <__fp_splitA+0xc>
 4ee:	86 95       	lsr	r24
 4f0:	71 05       	cpc	r23, r1
 4f2:	61 05       	cpc	r22, r1
 4f4:	08 94       	sec
 4f6:	08 95       	ret

000004f8 <__fp_zero>:
 4f8:	e8 94       	clt

000004fa <__fp_szero>:
 4fa:	bb 27       	eor	r27, r27
 4fc:	66 27       	eor	r22, r22
 4fe:	77 27       	eor	r23, r23
 500:	cb 01       	movw	r24, r22
 502:	97 f9       	bld	r25, 7
 504:	08 95       	ret

00000506 <__mulsf3>:
 506:	0e 94 96 02 	call	0x52c	; 0x52c <__mulsf3x>
 50a:	0c 94 49 02 	jmp	0x492	; 0x492 <__fp_round>
 50e:	0e 94 3b 02 	call	0x476	; 0x476 <__fp_pscA>
 512:	38 f0       	brcs	.+14     	; 0x522 <__mulsf3+0x1c>
 514:	0e 94 42 02 	call	0x484	; 0x484 <__fp_pscB>
 518:	20 f0       	brcs	.+8      	; 0x522 <__mulsf3+0x1c>
 51a:	95 23       	and	r25, r21
 51c:	11 f0       	breq	.+4      	; 0x522 <__mulsf3+0x1c>
 51e:	0c 94 32 02 	jmp	0x464	; 0x464 <__fp_inf>
 522:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_nan>
 526:	11 24       	eor	r1, r1
 528:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_szero>

0000052c <__mulsf3x>:
 52c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__fp_split3>
 530:	70 f3       	brcs	.-36     	; 0x50e <__mulsf3+0x8>

00000532 <__mulsf3_pse>:
 532:	95 9f       	mul	r25, r21
 534:	c1 f3       	breq	.-16     	; 0x526 <__mulsf3+0x20>
 536:	95 0f       	add	r25, r21
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	55 1f       	adc	r21, r21
 53c:	62 9f       	mul	r22, r18
 53e:	f0 01       	movw	r30, r0
 540:	72 9f       	mul	r23, r18
 542:	bb 27       	eor	r27, r27
 544:	f0 0d       	add	r31, r0
 546:	b1 1d       	adc	r27, r1
 548:	63 9f       	mul	r22, r19
 54a:	aa 27       	eor	r26, r26
 54c:	f0 0d       	add	r31, r0
 54e:	b1 1d       	adc	r27, r1
 550:	aa 1f       	adc	r26, r26
 552:	64 9f       	mul	r22, r20
 554:	66 27       	eor	r22, r22
 556:	b0 0d       	add	r27, r0
 558:	a1 1d       	adc	r26, r1
 55a:	66 1f       	adc	r22, r22
 55c:	82 9f       	mul	r24, r18
 55e:	22 27       	eor	r18, r18
 560:	b0 0d       	add	r27, r0
 562:	a1 1d       	adc	r26, r1
 564:	62 1f       	adc	r22, r18
 566:	73 9f       	mul	r23, r19
 568:	b0 0d       	add	r27, r0
 56a:	a1 1d       	adc	r26, r1
 56c:	62 1f       	adc	r22, r18
 56e:	83 9f       	mul	r24, r19
 570:	a0 0d       	add	r26, r0
 572:	61 1d       	adc	r22, r1
 574:	22 1f       	adc	r18, r18
 576:	74 9f       	mul	r23, r20
 578:	33 27       	eor	r19, r19
 57a:	a0 0d       	add	r26, r0
 57c:	61 1d       	adc	r22, r1
 57e:	23 1f       	adc	r18, r19
 580:	84 9f       	mul	r24, r20
 582:	60 0d       	add	r22, r0
 584:	21 1d       	adc	r18, r1
 586:	82 2f       	mov	r24, r18
 588:	76 2f       	mov	r23, r22
 58a:	6a 2f       	mov	r22, r26
 58c:	11 24       	eor	r1, r1
 58e:	9f 57       	subi	r25, 0x7F	; 127
 590:	50 40       	sbci	r21, 0x00	; 0
 592:	9a f0       	brmi	.+38     	; 0x5ba <__mulsf3_pse+0x88>
 594:	f1 f0       	breq	.+60     	; 0x5d2 <__mulsf3_pse+0xa0>
 596:	88 23       	and	r24, r24
 598:	4a f0       	brmi	.+18     	; 0x5ac <__mulsf3_pse+0x7a>
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	bb 1f       	adc	r27, r27
 5a0:	66 1f       	adc	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	88 1f       	adc	r24, r24
 5a6:	91 50       	subi	r25, 0x01	; 1
 5a8:	50 40       	sbci	r21, 0x00	; 0
 5aa:	a9 f7       	brne	.-22     	; 0x596 <__mulsf3_pse+0x64>
 5ac:	9e 3f       	cpi	r25, 0xFE	; 254
 5ae:	51 05       	cpc	r21, r1
 5b0:	80 f0       	brcs	.+32     	; 0x5d2 <__mulsf3_pse+0xa0>
 5b2:	0c 94 32 02 	jmp	0x464	; 0x464 <__fp_inf>
 5b6:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_szero>
 5ba:	5f 3f       	cpi	r21, 0xFF	; 255
 5bc:	e4 f3       	brlt	.-8      	; 0x5b6 <__mulsf3_pse+0x84>
 5be:	98 3e       	cpi	r25, 0xE8	; 232
 5c0:	d4 f3       	brlt	.-12     	; 0x5b6 <__mulsf3_pse+0x84>
 5c2:	86 95       	lsr	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b7 95       	ror	r27
 5ca:	f7 95       	ror	r31
 5cc:	e7 95       	ror	r30
 5ce:	9f 5f       	subi	r25, 0xFF	; 255
 5d0:	c1 f7       	brne	.-16     	; 0x5c2 <__mulsf3_pse+0x90>
 5d2:	fe 2b       	or	r31, r30
 5d4:	88 0f       	add	r24, r24
 5d6:	91 1d       	adc	r25, r1
 5d8:	96 95       	lsr	r25
 5da:	87 95       	ror	r24
 5dc:	97 f9       	bld	r25, 7
 5de:	08 95       	ret

000005e0 <__divmodhi4>:
 5e0:	97 fb       	bst	r25, 7
 5e2:	07 2e       	mov	r0, r23
 5e4:	16 f4       	brtc	.+4      	; 0x5ea <__divmodhi4+0xa>
 5e6:	00 94       	com	r0
 5e8:	07 d0       	rcall	.+14     	; 0x5f8 <__divmodhi4_neg1>
 5ea:	77 fd       	sbrc	r23, 7
 5ec:	09 d0       	rcall	.+18     	; 0x600 <__divmodhi4_neg2>
 5ee:	0e 94 04 03 	call	0x608	; 0x608 <__udivmodhi4>
 5f2:	07 fc       	sbrc	r0, 7
 5f4:	05 d0       	rcall	.+10     	; 0x600 <__divmodhi4_neg2>
 5f6:	3e f4       	brtc	.+14     	; 0x606 <__divmodhi4_exit>

000005f8 <__divmodhi4_neg1>:
 5f8:	90 95       	com	r25
 5fa:	81 95       	neg	r24
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	08 95       	ret

00000600 <__divmodhi4_neg2>:
 600:	70 95       	com	r23
 602:	61 95       	neg	r22
 604:	7f 4f       	sbci	r23, 0xFF	; 255

00000606 <__divmodhi4_exit>:
 606:	08 95       	ret

00000608 <__udivmodhi4>:
 608:	aa 1b       	sub	r26, r26
 60a:	bb 1b       	sub	r27, r27
 60c:	51 e1       	ldi	r21, 0x11	; 17
 60e:	07 c0       	rjmp	.+14     	; 0x61e <__udivmodhi4_ep>

00000610 <__udivmodhi4_loop>:
 610:	aa 1f       	adc	r26, r26
 612:	bb 1f       	adc	r27, r27
 614:	a6 17       	cp	r26, r22
 616:	b7 07       	cpc	r27, r23
 618:	10 f0       	brcs	.+4      	; 0x61e <__udivmodhi4_ep>
 61a:	a6 1b       	sub	r26, r22
 61c:	b7 0b       	sbc	r27, r23

0000061e <__udivmodhi4_ep>:
 61e:	88 1f       	adc	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	5a 95       	dec	r21
 624:	a9 f7       	brne	.-22     	; 0x610 <__udivmodhi4_loop>
 626:	80 95       	com	r24
 628:	90 95       	com	r25
 62a:	bc 01       	movw	r22, r24
 62c:	cd 01       	movw	r24, r26
 62e:	08 95       	ret

00000630 <_exit>:
 630:	f8 94       	cli

00000632 <__stop_program>:
 632:	ff cf       	rjmp	.-2      	; 0x632 <__stop_program>
